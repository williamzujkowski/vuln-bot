{"version":3,"file":"dashboard.js","mappings":"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","sources":["webpack://vuln-bot/./src/assets/ts/analytics.ts","webpack://vuln-bot/./src/assets/ts/dashboard.ts"],"sourcesContent":["/**\n * Frontend analytics for vulnerability dashboard\n */\n\nimport type {AnalyticsConfig} from './types';\n\ninterface AnalyticsEvent {\n  event: string;\n  category: string;\n  action: string;\n  label?: string | undefined;\n  value?: number | undefined;\n  metadata?: Record<string, unknown> | undefined;\n  timestamp: number;\n}\n\ninterface StoredData {\n  events: AnalyticsEvent[];\n  sessionId: string;\n  lastFlush: number;\n}\n\nexport class Analytics {\n  private events: AnalyticsEvent[] = [];\n  private sessionId: string;\n  private startTime: number;\n  private enabled: boolean = true;\n  private config: AnalyticsConfig;\n  private timers: Map<string, number> = new Map();\n  private flushTimeout?: number | undefined;\n  private sessionStartTime?: number | undefined;\n\n  constructor(\n      config: AnalyticsConfig = {\n        enabled: true,\n        storageKey: 'vuln_analytics',\n        maxEvents: 100,\n        flushInterval: 300000,\n      },\n  ) {\n    this.config = config;\n    this.sessionId = this.generateSessionId();\n    this.startTime = Date.now();\n\n    // Check if analytics should be disabled (e.g., DNT header)\n    const dnt =\n      (navigator as unknown as { doNotTrack?: string }).doNotTrack ??\n      (window as unknown as { doNotTrack?: string }).doNotTrack;\n    if (dnt === '1' || dnt === 'yes') {\n      this.enabled = false;\n      return;\n    }\n\n    if (!config.enabled) {\n      this.enabled = false;\n      return;\n    }\n\n    // Load existing events\n    this.loadEvents();\n\n    // Set up auto-flush\n    if (this.config.flushInterval) {\n      this.scheduleFlush();\n    }\n\n    // Set up page unload handler to save metrics\n    window.addEventListener('beforeunload', () => this.saveEvents());\n  }\n\n  private generateSessionId(): string {\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private loadEvents(): void {\n    if (!this.enabled || !this.config.storageKey) return;\n\n    try {\n      const stored = localStorage.getItem(this.config.storageKey);\n      if (stored) {\n        const data: StoredData = JSON.parse(stored);\n        this.events = data.events || [];\n      }\n    } catch {\n      // Ignore errors\n    }\n  }\n\n  private saveEvents(): void {\n    if (!this.enabled || !this.config.storageKey) return;\n\n    const data: StoredData = {\n      events: this.events,\n      sessionId: this.sessionId,\n      lastFlush: Date.now(),\n    };\n\n    try {\n      localStorage.setItem(this.config.storageKey, JSON.stringify(data));\n    } catch {\n      // Ignore errors\n    }\n  }\n\n  private scheduleFlush(): void {\n    if (this.flushTimeout) {\n      clearTimeout(this.flushTimeout);\n    }\n\n    this.flushTimeout = window.setTimeout(() => {\n      this.flush();\n      this.scheduleFlush();\n    }, this.config.flushInterval);\n  }\n\n  isEnabled(): boolean {\n    return this.enabled;\n  }\n\n  disable(): void {\n    this.enabled = false;\n  }\n\n  enable(): void {\n    this.enabled = true;\n  }\n\n  optOut(): void {\n    this.enabled = false;\n    this.clear();\n  }\n\n  /**\n   * Track a user event\n   */\n  track(\n      event: string,\n      category: string,\n      action: string,\n      label?: string,\n      value?: number,\n      metadata?: Record<string, unknown>,\n  ): void {\n    if (!this.enabled) return;\n\n    const analyticsEvent: AnalyticsEvent = {\n      event,\n      category,\n      action,\n      label,\n      value,\n      metadata,\n      timestamp: Date.now(),\n    };\n\n    this.events.push(analyticsEvent);\n\n    // Enforce max events limit\n    if (this.config.maxEvents && this.events.length > this.config.maxEvents) {\n      this.events = this.events.slice(-this.config.maxEvents);\n    }\n\n    this.saveEvents();\n  }\n\n  getEvents(): AnalyticsEvent[] {\n    return [...this.events];\n  }\n\n  clear(): void {\n    this.events = [];\n    if (this.config.storageKey) {\n      localStorage.removeItem(this.config.storageKey);\n    }\n  }\n\n  // Performance tracking\n  startTimer(name: string): void {\n    this.timers.set(name, performance.now());\n  }\n\n  endTimer(name: string, metadata?: Record<string, unknown>): void {\n    const startTime = this.timers.get(name);\n    if (startTime === undefined) return;\n\n    const duration = performance.now() - startTime;\n    this.timers.delete(name);\n\n    this.track('timing', 'performance', name, undefined, Math.round(duration), metadata);\n  }\n\n  // User interaction tracking\n  trackVulnerabilityClick(cveId: string, metadata?: Record<string, unknown>): void {\n    this.track('click', 'vulnerability', 'view', cveId, undefined, metadata);\n  }\n\n  trackSearch(query: string, resultCount: number): void {\n    this.track('search', 'search', 'query', query, resultCount);\n  }\n\n  trackFilterUsage(filterType: string, value: string, resultCount: number): void {\n    this.track('filter', 'filter', filterType, value, resultCount);\n  }\n\n  trackExport(format: string, count: number): void {\n    this.track('export', 'export', 'download', format, count);\n  }\n\n  trackFilter(filterType: string, value: unknown): void {\n    this.track('filter_change', 'interaction', 'filter', filterType, undefined, {\n      filterType,\n      value,\n    });\n  }\n\n  // Session tracking\n  trackPageView(path: string): void {\n    this.track('pageview', 'navigation', 'view', path);\n  }\n\n  startSession(): void {\n    this.sessionStartTime = performance.now();\n  }\n\n  endSession(): void {\n    if (this.sessionStartTime === undefined) return;\n\n    const duration = Math.round((performance.now() - this.sessionStartTime) / 1000); // seconds\n    this.track('session', 'user', 'duration', undefined, duration);\n    this.sessionStartTime = undefined;\n  }\n\n  trackEngagement(data: Record<string, unknown>): void {\n    this.track('engagement', 'user', 'interaction', undefined, undefined, data);\n  }\n\n  // Error tracking\n  trackError(error: Error | string, metadata?: Record<string, unknown>): void {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    const errorStack = error instanceof Error ? error.stack : undefined;\n\n    this.track('error', 'error', 'javascript', errorMessage, undefined, {\n      ...metadata,\n      stack: errorStack,\n    });\n  }\n\n  // Data management\n  getSummary() {\n    const eventCounts: Record<string, number> = {};\n    const categoryCounts: Record<string, number> = {};\n\n    this.events.forEach((event) => {\n      eventCounts[event.event] = (eventCounts[event.event] ?? 0) + 1;\n      categoryCounts[event.category] = (categoryCounts[event.category] ?? 0) + 1;\n    });\n\n    return {\n      totalEvents: this.events.length,\n      eventCounts,\n      categoryCounts,\n      sessionDuration: Date.now() - this.startTime,\n    };\n  }\n\n  exportJSON(): string {\n    return JSON.stringify(\n        {\n          events: this.events,\n          sessionId: this.sessionId,\n          exportDate: new Date().toISOString(),\n          version: '1.0.0',\n        },\n        null,\n        2,\n    );\n  }\n\n  async flush(): Promise<void> {\n    if (!this.enabled || !this.config.endpoint || this.events.length === 0) {\n      return;\n    }\n\n    try {\n      await fetch(this.config.endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          events: this.events,\n          sessionId: this.sessionId,\n        }),\n      });\n\n      // Clear events after successful flush\n      this.events = [];\n      this.saveEvents();\n    } catch (error) {\n      // Keep events on error\n      console.error('Analytics flush failed:', error);\n    }\n  }\n\n  /**\n   * Export all session data for debugging\n   */\n  exportSessionData() {\n    const sessions = [];\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key?.includes('vuln_analytics')) {\n        try {\n          const data = JSON.parse(localStorage.getItem(key) ?? '{}');\n          sessions.push({\n            key,\n            ...data,\n          });\n        } catch {\n          // Skip invalid entries\n        }\n      }\n    }\n    return JSON.stringify(sessions, null, 2);\n  }\n}\n\n// Export singleton instance\nexport const analytics = new Analytics();\n","/**\n * Alpine.js Vulnerability Dashboard - TypeScript Version\n */\n\nimport type {\n  Vulnerability,\n  VulnerabilityResponse,\n  SeverityLevel,\n  ExploitationStatus,\n} from './types/vulnerability';\nimport './types/alpine';\nimport {analytics} from './analytics';\n\ntype Fuse<T> = import('fuse.js').default<T>;\n\ninterface VulnDashboard {\n  // Data\n  vulnerabilities: Vulnerability[];\n  filteredVulns: Vulnerability[];\n  paginatedVulns: Vulnerability[];\n  searchQuery: string;\n  fuse: Fuse<Vulnerability> | null;\n\n  // Filters\n  filters: {\n    cvssMin: number;\n    cvssMax: number;\n    epssMin: number;\n    epssMax: number;\n    severity: SeverityLevel | '';\n    dateFrom: string;\n    dateTo: string;\n    vendor: string;\n    exploitationStatus: ExploitationStatus | '';\n    tags: string[];\n  };\n\n  // Sort\n  sortField: keyof Vulnerability;\n  sortDirection: 'asc' | 'desc';\n\n  // Pagination\n  currentPage: number;\n  pageSize: number;\n  totalPages: number;\n\n  // State\n  loading: boolean;\n  error: string | null;\n  initialLoad: boolean;\n\n  // Methods\n  init(): Promise<void>;\n  loadVulnerabilities(): Promise<void>;\n  setupLazyLoading(): void;\n  setupSearch(): void;\n  applyFilters(): void;\n  validateFilters(): boolean;\n  announceFilterResults(): void;\n  showValidationErrors(errors: string[]): void;\n  sortResults(results: Vulnerability[]): Vulnerability[];\n  sort(field: keyof Vulnerability): void;\n  updatePagination(): void;\n  previousPage(): void;\n  nextPage(): void;\n  watchFilters(): void;\n  saveStateToHash(): void;\n  loadStateFromHash(): void;\n  getSeverityClass(score: number): string;\n  formatDate(dateStr: string): string;\n  resetFilters(): void;\n  exportResults(): void;\n  trackVulnerabilityClick(cveId: string, riskScore: number): void;\n  $nextTick(callback: () => void): void;\n}\n\ndocument.addEventListener('alpine:init', () => {\n  window.Alpine.data(\n      'vulnDashboard',\n      (): VulnDashboard => ({\n      // Data\n        vulnerabilities: [],\n        filteredVulns: [],\n        paginatedVulns: [],\n        searchQuery: '',\n        fuse: null,\n\n        // Filters\n        filters: {\n          cvssMin: 0,\n          cvssMax: 10,\n          epssMin: 0,\n          epssMax: 100,\n          severity: '',\n          dateFrom: '',\n          dateTo: '',\n          vendor: '',\n          exploitationStatus: '',\n          tags: [],\n        },\n\n        // Sort\n        sortField: 'riskScore',\n        sortDirection: 'desc',\n\n        // Pagination\n        currentPage: 1,\n        pageSize: 20,\n        totalPages: 1,\n\n        // State\n        loading: true,\n        error: null,\n        initialLoad: true,\n\n        async init(): Promise<void> {\n        // Start performance timer\n          analytics.startTimer('page-load');\n\n          // Load state from URL hash\n          this.loadStateFromHash();\n\n          // Load vulnerability data\n          await this.loadVulnerabilities();\n\n          // Set up Fuse.js for fuzzy search\n          this.setupSearch();\n\n          // Apply initial filters\n          this.applyFilters();\n\n          // Mark initial load as complete\n          this.initialLoad = false;\n\n          // Watch for changes\n          this.watchFilters();\n\n          // Track performance\n          analytics.endTimer('page-load');\n        },\n\n        async loadVulnerabilities(): Promise<void> {\n          try {\n            this.loading = true;\n            this.error = null;\n\n            const response = await fetch('/vuln-bot/api/vulns/index.json');\n            if (!response.ok) {\n              throw new Error(`Failed to load vulnerabilities: ${response.status}`);\n            }\n\n            const data: VulnerabilityResponse = await response.json();\n            this.vulnerabilities = data.vulnerabilities || [];\n            this.loading = false;\n\n            // Set up intersection observer for lazy loading\n            this.setupLazyLoading();\n          } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n            this.error = errorMessage;\n            this.loading = false;\n            console.error('Failed to load vulnerabilities:', error);\n          }\n        },\n\n        setupLazyLoading(): void {\n        // Create intersection observer for lazy loading table rows\n          if ('IntersectionObserver' in window) {\n            const observerOptions = {\n              root: null,\n              rootMargin: '100px', // Start loading 100px before visible\n              threshold: 0.01,\n            };\n\n            const lazyLoadObserver = new IntersectionObserver((entries) => {\n              entries.forEach((entry) => {\n                if (entry.isIntersecting) {\n                  const element = entry.target as HTMLElement;\n                  element.classList.add('loaded');\n                  lazyLoadObserver.unobserve(element);\n                }\n              });\n            }, observerOptions);\n\n            // Observe vulnerability rows after render\n            this.$nextTick(() => {\n              document.querySelectorAll('.vulnerability-row[data-lazy]').forEach((row) => {\n                lazyLoadObserver.observe(row);\n              });\n            });\n          }\n        },\n\n        setupSearch(): void {\n          if (this.vulnerabilities.length === 0) return;\n\n          // Configure Fuse.js for fuzzy search\n          const options = {\n            keys: ['cveId', 'title', 'vendors', 'products', 'tags'],\n            threshold: 0.3,\n            includeScore: true,\n          };\n\n          this.fuse = new window.Fuse(this.vulnerabilities, options);\n        },\n\n        applyFilters(): void {\n        // Validate filters first\n          if (!this.validateFilters()) {\n            return;\n          }\n\n          let results: Vulnerability[] = [...this.vulnerabilities];\n\n          // Apply search\n          if (this.searchQuery.trim() && this.fuse) {\n            const searchResults = this.fuse.search(this.searchQuery);\n            results = searchResults.map((result: { item: Vulnerability }) => result.item);\n\n            // Track search\n            analytics.trackSearch(this.searchQuery, results.length);\n          }\n\n          // Apply CVSS filter\n          results = results.filter((vuln) => {\n            const score = vuln.cvssScore || 0;\n            return score >= this.filters.cvssMin && score <= this.filters.cvssMax;\n          });\n\n          // Apply EPSS filter\n          results = results.filter((vuln) => {\n            const score = vuln.epssScore || 0;\n            return score >= this.filters.epssMin && score <= this.filters.epssMax;\n          });\n\n          // Apply severity filter\n          if (this.filters.severity) {\n            results = results.filter((vuln) => vuln.severity === this.filters.severity);\n          }\n\n          // Apply date filter\n          if (this.filters.dateFrom) {\n            const fromDate = new Date(this.filters.dateFrom);\n            results = results.filter((vuln) => new Date(vuln.publishedDate) >= fromDate);\n          }\n\n          if (this.filters.dateTo) {\n            const toDate = new Date(this.filters.dateTo);\n            results = results.filter((vuln) => new Date(vuln.publishedDate) <= toDate);\n          }\n\n          // Apply vendor filter\n          if (this.filters.vendor) {\n            const vendorLower = this.filters.vendor.toLowerCase();\n            results = results.filter((vuln) =>\n              vuln.vendors.some((v) => v.toLowerCase().includes(vendorLower)),\n            );\n          }\n\n          // Apply exploitation status filter\n          if (this.filters.exploitationStatus) {\n            results = results.filter(\n                (vuln) => vuln.exploitationStatus === this.filters.exploitationStatus,\n            );\n          }\n\n          // Apply tag filter\n          if (this.filters.tags.length > 0) {\n            results = results.filter((vuln) =>\n              this.filters.tags.every((tag) => vuln.tags.includes(tag)),\n            );\n          }\n\n          // Apply sorting\n          results = this.sortResults(results);\n\n          this.filteredVulns = results;\n          this.updatePagination();\n          this.saveStateToHash();\n\n          // Announce results to screen readers\n          this.announceFilterResults();\n        },\n\n        announceFilterResults(): void {\n          const resultCount = this.filteredVulns.length;\n          const totalCount = this.vulnerabilities.length;\n\n          let announcement = `Showing ${resultCount} of ${totalCount} vulnerabilities`;\n\n          // Add filter context\n          const activeFilters = [];\n          if (this.searchQuery) activeFilters.push(`matching \"${this.searchQuery}\"`);\n          if (this.filters.severity) activeFilters.push(`severity: ${this.filters.severity}`);\n          if (this.filters.cvssMin > 0 || this.filters.cvssMax < 10) {\n            activeFilters.push(`CVSS: ${this.filters.cvssMin}-${this.filters.cvssMax}`);\n          }\n          if (this.filters.epssMin > 0 || this.filters.epssMax < 100) {\n            activeFilters.push(`EPSS: ${this.filters.epssMin}%-${this.filters.epssMax}%`);\n          }\n          if (this.filters.vendor) activeFilters.push(`vendor: ${this.filters.vendor}`);\n          if (this.filters.exploitationStatus) {\n            activeFilters.push(`exploitation: ${this.filters.exploitationStatus}`);\n          }\n          if (this.filters.tags.length > 0) activeFilters.push(`tags: ${this.filters.tags.join(', ')}`);\n\n          if (activeFilters.length > 0) {\n            announcement += ` with filters: ${activeFilters.join(', ')}`;\n          }\n\n          // Create or update live region\n          let liveRegion = document.getElementById('filter-announcement');\n          if (!liveRegion) {\n            liveRegion = document.createElement('div');\n            liveRegion.id = 'filter-announcement';\n            liveRegion.className = 'sr-only';\n            liveRegion.setAttribute('role', 'status');\n            liveRegion.setAttribute('aria-live', 'polite');\n            liveRegion.setAttribute('aria-atomic', 'true');\n            document.body.appendChild(liveRegion);\n          }\n\n          // Update announcement\n          liveRegion.textContent = announcement;\n        },\n\n        validateFilters(): boolean {\n          const errors = [];\n\n          // Validate CVSS range\n          if (this.filters.cvssMin > this.filters.cvssMax) {\n            errors.push('CVSS minimum score cannot be greater than maximum');\n          }\n\n          // Validate EPSS range\n          if (this.filters.epssMin > this.filters.epssMax) {\n            errors.push('EPSS minimum score cannot be greater than maximum');\n          }\n\n          // Validate date range\n          if (this.filters.dateFrom && this.filters.dateTo) {\n            const fromDate = new Date(this.filters.dateFrom);\n            const toDate = new Date(this.filters.dateTo);\n            if (fromDate > toDate) {\n              errors.push('Start date cannot be after end date');\n            }\n          }\n\n          // Show errors\n          if (errors.length > 0) {\n            this.showValidationErrors(errors);\n            return false;\n          }\n\n          return true;\n        },\n\n        showValidationErrors(errors: string[]): void {\n        // Create or update error region\n          let errorRegion = document.getElementById('validation-errors');\n          if (!errorRegion) {\n            errorRegion = document.createElement('div');\n            errorRegion.id = 'validation-errors';\n            errorRegion.className = 'validation-errors';\n            errorRegion.setAttribute('role', 'alert');\n            errorRegion.setAttribute('aria-live', 'assertive');\n            const filterSection = document.getElementById('search-filters');\n            filterSection?.insertBefore(errorRegion, filterSection.firstChild);\n          }\n\n          // Build error list\n          errorRegion.innerHTML = `\n          <h3>Validation Errors</h3>\n          <ul>\n            ${errors.map((error) => `<li>${error}</li>`).join('')}\n          </ul>\n        `;\n\n          // Focus on first error\n          errorRegion.focus();\n\n          // Clear errors after 5 seconds\n          setTimeout(() => {\n            errorRegion.innerHTML = '';\n          }, 5000);\n        },\n\n        sortResults(results: Vulnerability[]): Vulnerability[] {\n          const field = this.sortField;\n          const direction = this.sortDirection;\n\n          return results.sort((a, b) => {\n            let aVal: string | number = a[field] as string | number;\n            let bVal: string | number = b[field] as string | number;\n\n            // Handle null/undefined values\n            aVal ??= '';\n            bVal ??= '';\n\n            // Handle dates\n            if (typeof field === 'string' && field.includes('Date')) {\n              aVal = new Date(aVal as string).getTime();\n              bVal = new Date(bVal as string).getTime();\n            }\n\n            // Compare\n            if (aVal < bVal) return direction === 'asc' ? -1 : 1;\n            if (aVal > bVal) return direction === 'asc' ? 1 : -1;\n            return 0;\n          });\n        },\n\n        sort(field: keyof Vulnerability): void {\n          if (this.sortField === field) {\n          // Toggle direction\n            this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';\n          } else {\n          // New field, default to descending\n            this.sortField = field;\n            this.sortDirection = 'desc';\n          }\n\n          // Track sort change\n          analytics.track('sort', 'interaction', 'sort', field, undefined, {\n            direction: this.sortDirection,\n          });\n\n          this.applyFilters();\n        },\n\n        updatePagination(): void {\n          this.totalPages = Math.ceil(this.filteredVulns.length / this.pageSize);\n          this.currentPage = Math.min(this.currentPage, Math.max(1, this.totalPages));\n\n          const start = (this.currentPage - 1) * this.pageSize;\n          const end = start + this.pageSize;\n          this.paginatedVulns = this.filteredVulns.slice(start, end);\n        },\n\n        previousPage(): void {\n          if (this.currentPage > 1) {\n            this.currentPage--;\n            this.updatePagination();\n          }\n        },\n\n        nextPage(): void {\n          if (this.currentPage < this.totalPages) {\n            this.currentPage++;\n            this.updatePagination();\n          }\n        },\n\n        watchFilters(): void {\n        // Watch for filter changes\n          (this as unknown as { $watch: Function }).$watch('searchQuery', () => this.applyFilters());\n          (this as unknown as { $watch: Function }).$watch('filters', () => this.applyFilters(), {\n            deep: true,\n          });\n          (this as unknown as { $watch: Function }).$watch('pageSize', () => {\n            this.currentPage = 1;\n            this.updatePagination();\n          });\n        },\n\n        saveStateToHash(): void {\n        // Don't save state during initial load\n          if (this.loading || this.vulnerabilities.length === 0 || this.initialLoad) {\n            return;\n          }\n\n          const state: Record<string, string | number> = {\n            q: this.searchQuery,\n            cvssMin: this.filters.cvssMin,\n            cvssMax: this.filters.cvssMax,\n            epssMin: this.filters.epssMin,\n            epssMax: this.filters.epssMax,\n            severity: this.filters.severity,\n            dateFrom: this.filters.dateFrom,\n            dateTo: this.filters.dateTo,\n            vendor: this.filters.vendor,\n            exploitation: this.filters.exploitationStatus,\n            tags: this.filters.tags.join(','),\n            sort: this.sortField,\n            dir: this.sortDirection,\n            page: this.currentPage,\n            size: this.pageSize,\n          };\n\n          // Remove empty values and defaults\n          Object.keys(state).forEach((key) => {\n            const value = state[key];\n            if (\n              !value ||\n            value === '' ||\n            (key === 'cvssMin' && value === 0) ||\n            (key === 'cvssMax' && value === 10) ||\n            (key === 'epssMin' && value === 0) ||\n            (key === 'epssMax' && value === 100) ||\n            (key === 'page' && value === 1) ||\n            (key === 'size' && value === 20) ||\n            (key === 'sort' && value === 'riskScore') ||\n            (key === 'dir' && value === 'desc')\n            ) {\n              delete state[key];\n            }\n          });\n\n          const hash = new URLSearchParams(\n              Object.fromEntries(Object.entries(state).map(([k, v]) => [k, String(v)])),\n          ).toString();\n          window.location.hash = hash;\n        },\n\n        loadStateFromHash(): void {\n          const hash = window.location.hash.slice(1);\n          if (!hash) return;\n\n          const params = new URLSearchParams(hash);\n\n          // Load search query\n          this.searchQuery = params.get('q') ?? '';\n\n          // Load filters\n          this.filters.cvssMin = parseFloat(params.get('cvssMin') ?? '0');\n          this.filters.cvssMax = parseFloat(params.get('cvssMax') ?? '10');\n          this.filters.epssMin = parseInt(params.get('epssMin') ?? '0');\n          this.filters.epssMax = parseInt(params.get('epssMax') ?? '100');\n          this.filters.severity = (params.get('severity') ?? '') as SeverityLevel | '';\n          this.filters.dateFrom = params.get('dateFrom') ?? '';\n          this.filters.dateTo = params.get('dateTo') ?? '';\n          this.filters.vendor = params.get('vendor') ?? '';\n          this.filters.exploitationStatus = (params.get('exploitation') ?? '') as\n          | ExploitationStatus\n          | '';\n\n          const tags = params.get('tags');\n          this.filters.tags = tags ? tags.split(',').filter((t) => t) : [];\n\n          // Load sorting\n          this.sortField = (params.get('sort') ?? 'riskScore') as keyof Vulnerability;\n          this.sortDirection = (params.get('dir') ?? 'desc') as 'asc' | 'desc';\n\n          // Load pagination\n          this.currentPage = parseInt(params.get('page') ?? '1');\n          this.pageSize = parseInt(params.get('size') ?? '20');\n        },\n\n        getSeverityClass(score: number): string {\n          if (score >= 9) return 'severity-critical';\n          if (score >= 7) return 'severity-high';\n          if (score >= 4) return 'severity-medium';\n          if (score > 0) return 'severity-low';\n          return 'severity-none';\n        },\n\n        formatDate(dateStr: string): string {\n          const date = new Date(dateStr);\n          return date.toLocaleDateString('en-US', {\n            year: 'numeric',\n            month: 'short',\n            day: 'numeric',\n          });\n        },\n\n        resetFilters(): void {\n          this.searchQuery = '';\n          this.filters = {\n            cvssMin: 0,\n            cvssMax: 10,\n            epssMin: 0,\n            epssMax: 100,\n            severity: '',\n            dateFrom: '',\n            dateTo: '',\n            vendor: '',\n            exploitationStatus: '',\n            tags: [],\n          };\n          this.currentPage = 1;\n          this.applyFilters();\n        },\n\n        exportResults(): void {\n        // Track export\n          analytics.trackExport('csv', this.filteredVulns.length);\n\n          // Create CSV content\n          const headers = [\n            'CVE ID',\n            'Title',\n            'Risk Score',\n            'Severity',\n            'CVSS Score',\n            'EPSS %',\n            'Published Date',\n          ];\n          const rows = this.filteredVulns.map((vuln) => [\n            vuln.cveId,\n            `\"${vuln.title.replace(/\"/g, '\"\"')}\"`,\n            vuln.riskScore.toString(),\n            vuln.severity,\n            vuln.cvssScore?.toString() || '',\n            vuln.epssScore?.toString() || '',\n            vuln.publishedDate,\n          ]);\n\n          const csv = [headers, ...rows].map((row) => row.join(',')).join('\\n');\n\n          // Download CSV\n          const blob = new Blob([csv], {type: 'text/csv'});\n          const url = URL.createObjectURL(blob);\n          const a = document.createElement('a');\n          a.href = url;\n          a.download = `vulnerabilities-${new Date().toISOString().slice(0, 10)}.csv`;\n          a.click();\n          URL.revokeObjectURL(url);\n        },\n\n        trackVulnerabilityClick(cveId: string, riskScore: number): void {\n          analytics.trackVulnerabilityClick(cveId, {riskScore});\n        },\n\n        $nextTick(callback: () => void): void {\n          // This method is provided by Alpine.js at runtime\n          // @ts-ignore\n          this.$nextTick(callback);\n        },\n      }),\n  );\n});\n"],"names":["analytics","constructor","config","enabled","storageKey","maxEvents","flushInterval","events","timers","Map","this","sessionId","generateSessionId","startTime","Date","now","dnt","navigator","doNotTrack","window","loadEvents","scheduleFlush","addEventListener","saveEvents","Math","random","toString","substr","stored","localStorage","getItem","data","JSON","parse","lastFlush","setItem","stringify","flushTimeout","clearTimeout","setTimeout","flush","isEnabled","disable","enable","optOut","clear","track","event","category","action","label","value","metadata","analyticsEvent","timestamp","push","length","slice","getEvents","removeItem","startTimer","name","set","performance","endTimer","get","undefined","duration","delete","round","trackVulnerabilityClick","cveId","trackSearch","query","resultCount","trackFilterUsage","filterType","trackExport","format","count","trackFilter","trackPageView","path","startSession","sessionStartTime","endSession","trackEngagement","trackError","error","errorMessage","Error","message","String","errorStack","stack","getSummary","eventCounts","categoryCounts","forEach","totalEvents","sessionDuration","exportJSON","exportDate","toISOString","version","endpoint","fetch","method","headers","body","console","exportSessionData","sessions","i","key","includes","document","Alpine","vulnerabilities","filteredVulns","paginatedVulns","searchQuery","fuse","filters","cvssMin","cvssMax","epssMin","epssMax","severity","dateFrom","dateTo","vendor","exploitationStatus","tags","sortField","sortDirection","currentPage","pageSize","totalPages","loading","initialLoad","init","loadStateFromHash","loadVulnerabilities","setupSearch","applyFilters","watchFilters","response","ok","status","json","setupLazyLoading","lazyLoadObserver","IntersectionObserver","entries","entry","isIntersecting","element","target","classList","add","unobserve","root","rootMargin","threshold","$nextTick","querySelectorAll","row","observe","Fuse","keys","includeScore","validateFilters","results","trim","search","map","result","item","filter","vuln","score","cvssScore","epssScore","fromDate","publishedDate","toDate","vendorLower","toLowerCase","vendors","some","v","every","tag","sortResults","updatePagination","saveStateToHash","announceFilterResults","announcement","activeFilters","join","liveRegion","getElementById","createElement","id","className","setAttribute","appendChild","textContent","errors","showValidationErrors","errorRegion","filterSection","insertBefore","firstChild","innerHTML","focus","field","direction","sort","a","b","aVal","bVal","getTime","ceil","min","max","start","end","previousPage","nextPage","$watch","deep","state","q","exploitation","dir","page","size","Object","hash","URLSearchParams","fromEntries","k","location","params","parseFloat","parseInt","split","t","getSeverityClass","formatDate","dateStr","toLocaleDateString","year","month","day","resetFilters","exportResults","csv","title","replace","riskScore","blob","Blob","type","url","URL","createObjectURL","href","download","click","revokeObjectURL","callback"],"sourceRoot":""}