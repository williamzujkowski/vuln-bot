{"version":3,"file":"dashboard.js","mappings":"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","sources":["webpack://vuln-bot/./src/assets/ts/dashboard.ts"],"sourcesContent":["/**\n * Alpine.js Vulnerability Dashboard - TypeScript Version\n */\n\nimport type {\n  Vulnerability,\n  VulnerabilityResponse,\n  SeverityLevel,\n  ExploitationStatus,\n} from './types/vulnerability';\nimport './types/alpine';\n\ntype Fuse<T> = import('fuse.js').default<T>;\n\ninterface VulnDashboard {\n  // Data\n  vulnerabilities: Vulnerability[];\n  filteredVulns: Vulnerability[];\n  paginatedVulns: Vulnerability[];\n  searchQuery: string;\n  fuse: Fuse<Vulnerability> | null;\n\n  // Filters\n  filters: {\n    cvssMin: number;\n    cvssMax: number;\n    epssMin: number;\n    epssMax: number;\n    severity: SeverityLevel | '';\n    dateFrom: string;\n    dateTo: string;\n    vendor: string;\n    exploitationStatus: ExploitationStatus | '';\n    tags: string[];\n  };\n\n  // Sort\n  sortField: keyof Vulnerability;\n  sortDirection: 'asc' | 'desc';\n\n  // Pagination\n  currentPage: number;\n  pageSize: number;\n  totalPages: number;\n\n  // State\n  loading: boolean;\n  error: string | null;\n  initialLoad: boolean;\n\n  // Methods\n  init(): Promise<void>;\n  loadVulnerabilities(): Promise<void>;\n  setupSearch(): void;\n  applyFilters(): void;\n  sortResults(results: Vulnerability[]): Vulnerability[];\n  sort(field: keyof Vulnerability): void;\n  updatePagination(): void;\n  previousPage(): void;\n  nextPage(): void;\n  watchFilters(): void;\n  saveStateToHash(): void;\n  loadStateFromHash(): void;\n  getSeverityClass(score: number): string;\n  formatDate(dateStr: string): string;\n  resetFilters(): void;\n  exportResults(): void;\n}\n\ndocument.addEventListener('alpine:init', () => {\n  window.Alpine.data('vulnDashboard', (): VulnDashboard => ({\n    // Data\n    vulnerabilities: [],\n    filteredVulns: [],\n    paginatedVulns: [],\n    searchQuery: '',\n    fuse: null,\n\n    // Filters\n    filters: {\n      cvssMin: 0,\n      cvssMax: 10,\n      epssMin: 0,\n      epssMax: 100,\n      severity: '',\n      dateFrom: '',\n      dateTo: '',\n      vendor: '',\n      exploitationStatus: '',\n      tags: [],\n    },\n\n    // Sort\n    sortField: 'riskScore',\n    sortDirection: 'desc',\n\n    // Pagination\n    currentPage: 1,\n    pageSize: 20,\n    totalPages: 1,\n\n    // State\n    loading: true,\n    error: null,\n    initialLoad: true,\n\n    async init(): Promise<void> {\n      // Load state from URL hash\n      this.loadStateFromHash();\n\n      // Load vulnerability data\n      await this.loadVulnerabilities();\n\n      // Set up Fuse.js for fuzzy search\n      this.setupSearch();\n\n      // Apply initial filters\n      this.applyFilters();\n\n      // Mark initial load as complete\n      this.initialLoad = false;\n\n      // Watch for changes\n      this.watchFilters();\n    },\n\n    async loadVulnerabilities(): Promise<void> {\n      try {\n        this.loading = true;\n        this.error = null;\n\n        const response = await fetch('/vuln-bot/api/vulns/index.json');\n        if (!response.ok) {\n          throw new Error(`Failed to load vulnerabilities: ${response.status}`);\n        }\n\n        const data: VulnerabilityResponse = await response.json();\n        this.vulnerabilities = data.vulnerabilities || [];\n        this.loading = false;\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n        this.error = errorMessage;\n        this.loading = false;\n        console.error('Failed to load vulnerabilities:', error);\n      }\n    },\n\n    setupSearch(): void {\n      if (this.vulnerabilities.length === 0) return;\n\n      // Configure Fuse.js for fuzzy search\n      const options = {\n        keys: ['cveId', 'title', 'vendors', 'products', 'tags'],\n        threshold: 0.3,\n        includeScore: true,\n      };\n\n      this.fuse = new window.Fuse(this.vulnerabilities, options);\n    },\n\n    applyFilters(): void {\n      let results: Vulnerability[] = [...this.vulnerabilities];\n\n      // Apply search\n      if (this.searchQuery.trim() && this.fuse) {\n        const searchResults = this.fuse.search(this.searchQuery);\n        results = searchResults.map((result: any) => result.item);\n      }\n\n      // Apply CVSS filter\n      results = results.filter((vuln) => {\n        const score = vuln.cvssScore || 0;\n        return score >= this.filters.cvssMin && score <= this.filters.cvssMax;\n      });\n\n      // Apply EPSS filter\n      results = results.filter((vuln) => {\n        const score = vuln.epssScore || 0;\n        return score >= this.filters.epssMin && score <= this.filters.epssMax;\n      });\n\n      // Apply severity filter\n      if (this.filters.severity) {\n        results = results.filter((vuln) => vuln.severity === this.filters.severity);\n      }\n\n      // Apply date filter\n      if (this.filters.dateFrom) {\n        const fromDate = new Date(this.filters.dateFrom);\n        results = results.filter((vuln) => new Date(vuln.publishedDate) >= fromDate);\n      }\n\n      if (this.filters.dateTo) {\n        const toDate = new Date(this.filters.dateTo);\n        results = results.filter((vuln) => new Date(vuln.publishedDate) <= toDate);\n      }\n\n      // Apply vendor filter\n      if (this.filters.vendor) {\n        const vendorLower = this.filters.vendor.toLowerCase();\n        results = results.filter((vuln) =>\n          vuln.vendors.some((v) => v.toLowerCase().includes(vendorLower)),\n        );\n      }\n\n      // Apply exploitation status filter\n      if (this.filters.exploitationStatus) {\n        results = results.filter(\n            (vuln) => vuln.exploitationStatus === this.filters.exploitationStatus,\n        );\n      }\n\n      // Apply tag filter\n      if (this.filters.tags.length > 0) {\n        results = results.filter((vuln) =>\n          this.filters.tags.every((tag) => vuln.tags.includes(tag)),\n        );\n      }\n\n      // Apply sorting\n      results = this.sortResults(results);\n\n      this.filteredVulns = results;\n      this.updatePagination();\n      this.saveStateToHash();\n    },\n\n    sortResults(results: Vulnerability[]): Vulnerability[] {\n      const field = this.sortField;\n      const direction = this.sortDirection;\n\n      return results.sort((a, b) => {\n        let aVal = a[field] as unknown;\n        let bVal = b[field] as unknown;\n\n        // Handle null/undefined values\n        aVal ??= '';\n        bVal ??= '';\n\n        // Handle dates\n        if (typeof field === 'string' && field.includes('Date')) {\n          aVal = new Date(aVal as string).getTime();\n          bVal = new Date(bVal as string).getTime();\n        }\n\n        // Compare\n        if ((aVal as any) < (bVal as any)) return direction === 'asc' ? -1 : 1;\n        if ((aVal as any) > (bVal as any)) return direction === 'asc' ? 1 : -1;\n        return 0;\n      });\n    },\n\n    sort(field: keyof Vulnerability): void {\n      if (this.sortField === field) {\n        // Toggle direction\n        this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';\n      } else {\n        // New field, default to descending\n        this.sortField = field;\n        this.sortDirection = 'desc';\n      }\n\n      this.applyFilters();\n    },\n\n    updatePagination(): void {\n      this.totalPages = Math.ceil(this.filteredVulns.length / this.pageSize);\n      this.currentPage = Math.min(\n          this.currentPage,\n          Math.max(1, this.totalPages),\n      );\n\n      const start = (this.currentPage - 1) * this.pageSize;\n      const end = start + this.pageSize;\n      this.paginatedVulns = this.filteredVulns.slice(start, end);\n    },\n\n    previousPage(): void {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n        this.updatePagination();\n      }\n    },\n\n    nextPage(): void {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n        this.updatePagination();\n      }\n    },\n\n    watchFilters(): void {\n      // Watch for filter changes\n      (this as any).$watch('searchQuery', () => this.applyFilters());\n      (this as any).$watch('filters', () => this.applyFilters(), {deep: true});\n      (this as any).$watch('pageSize', () => {\n        this.currentPage = 1;\n        this.updatePagination();\n      });\n    },\n\n    saveStateToHash(): void {\n      // Don't save state during initial load\n      if (this.loading || this.vulnerabilities.length === 0 || this.initialLoad) {\n        return;\n      }\n\n      const state: Record<string, string | number> = {\n        q: this.searchQuery,\n        cvssMin: this.filters.cvssMin,\n        cvssMax: this.filters.cvssMax,\n        epssMin: this.filters.epssMin,\n        epssMax: this.filters.epssMax,\n        severity: this.filters.severity,\n        dateFrom: this.filters.dateFrom,\n        dateTo: this.filters.dateTo,\n        vendor: this.filters.vendor,\n        exploitation: this.filters.exploitationStatus,\n        tags: this.filters.tags.join(','),\n        sort: this.sortField,\n        dir: this.sortDirection,\n        page: this.currentPage,\n        size: this.pageSize,\n      };\n\n      // Remove empty values and defaults\n      Object.keys(state).forEach((key) => {\n        const value = state[key];\n        if (\n          !value ||\n          value === '' ||\n          (key === 'cvssMin' && value === 0) ||\n          (key === 'cvssMax' && value === 10) ||\n          (key === 'epssMin' && value === 0) ||\n          (key === 'epssMax' && value === 100) ||\n          (key === 'page' && value === 1) ||\n          (key === 'size' && value === 20) ||\n          (key === 'sort' && value === 'riskScore') ||\n          (key === 'dir' && value === 'desc')\n        ) {\n          delete state[key];\n        }\n      });\n\n      const hash = new URLSearchParams(\n          Object.fromEntries(\n              Object.entries(state).map(([k, v]) => [k, String(v)]),\n          ),\n      ).toString();\n      window.location.hash = hash;\n    },\n\n    loadStateFromHash(): void {\n      const hash = window.location.hash.slice(1);\n      if (!hash) return;\n\n      const params = new URLSearchParams(hash);\n\n      // Load search query\n      this.searchQuery = params.get('q') ?? '';\n\n      // Load filters\n      this.filters.cvssMin = parseFloat(params.get('cvssMin') ?? '0');\n      this.filters.cvssMax = parseFloat(params.get('cvssMax') ?? '10');\n      this.filters.epssMin = parseInt(params.get('epssMin') ?? '0');\n      this.filters.epssMax = parseInt(params.get('epssMax') ?? '100');\n      this.filters.severity = (params.get('severity') ?? '') as SeverityLevel | '';\n      this.filters.dateFrom = params.get('dateFrom') ?? '';\n      this.filters.dateTo = params.get('dateTo') ?? '';\n      this.filters.vendor = params.get('vendor') ?? '';\n      this.filters.exploitationStatus = (params.get('exploitation') ?? '') as ExploitationStatus | '';\n\n      const tags = params.get('tags');\n      this.filters.tags = tags ? tags.split(',').filter((t) => t) : [];\n\n      // Load sorting\n      this.sortField = (params.get('sort') ?? 'riskScore') as keyof Vulnerability;\n      this.sortDirection = (params.get('dir') ?? 'desc') as 'asc' | 'desc';\n\n      // Load pagination\n      this.currentPage = parseInt(params.get('page') ?? '1');\n      this.pageSize = parseInt(params.get('size') ?? '20');\n    },\n\n    getSeverityClass(score: number): string {\n      if (score >= 9) return 'severity-critical';\n      if (score >= 7) return 'severity-high';\n      if (score >= 4) return 'severity-medium';\n      if (score > 0) return 'severity-low';\n      return 'severity-none';\n    },\n\n    formatDate(dateStr: string): string {\n      const date = new Date(dateStr);\n      return date.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n      });\n    },\n\n    resetFilters(): void {\n      this.searchQuery = '';\n      this.filters = {\n        cvssMin: 0,\n        cvssMax: 10,\n        epssMin: 0,\n        epssMax: 100,\n        severity: '',\n        dateFrom: '',\n        dateTo: '',\n        vendor: '',\n        exploitationStatus: '',\n        tags: [],\n      };\n      this.currentPage = 1;\n      this.applyFilters();\n    },\n\n    exportResults(): void {\n      // Create CSV content\n      const headers = [\n        'CVE ID',\n        'Title',\n        'Risk Score',\n        'Severity',\n        'CVSS Score',\n        'EPSS %',\n        'Published Date',\n      ];\n      const rows = this.filteredVulns.map((vuln) => [\n        vuln.cveId,\n        `\"${vuln.title.replace(/\"/g, '\"\"')}\"`,\n        vuln.riskScore.toString(),\n        vuln.severity,\n        vuln.cvssScore?.toString() || '',\n        vuln.epssScore?.toString() || '',\n        vuln.publishedDate,\n      ]);\n\n      const csv = [headers, ...rows].map((row) => row.join(',')).join('\\n');\n\n      // Download CSV\n      const blob = new Blob([csv], {type: 'text/csv'});\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `vulnerabilities-${new Date().toISOString().slice(0, 10)}.csv`;\n      a.click();\n      URL.revokeObjectURL(url);\n    },\n  }));\n});\n"],"names":["document","addEventListener","window","Alpine","data","vulnerabilities","filteredVulns","paginatedVulns","searchQuery","fuse","filters","cvssMin","cvssMax","epssMin","epssMax","severity","dateFrom","dateTo","vendor","exploitationStatus","tags","sortField","sortDirection","currentPage","pageSize","totalPages","loading","error","initialLoad","init","this","loadStateFromHash","loadVulnerabilities","setupSearch","applyFilters","watchFilters","response","fetch","ok","Error","status","json","errorMessage","message","console","length","Fuse","keys","threshold","includeScore","results","trim","search","map","result","item","filter","vuln","score","cvssScore","epssScore","fromDate","Date","publishedDate","toDate","vendorLower","toLowerCase","vendors","some","v","includes","every","tag","sortResults","updatePagination","saveStateToHash","field","direction","sort","a","b","aVal","bVal","getTime","Math","ceil","min","max","start","end","slice","previousPage","nextPage","$watch","deep","state","q","exploitation","join","dir","page","size","Object","forEach","key","value","hash","URLSearchParams","fromEntries","entries","k","String","toString","location","params","get","parseFloat","parseInt","split","t","getSeverityClass","formatDate","dateStr","toLocaleDateString","year","month","day","resetFilters","exportResults","csv","cveId","title","replace","riskScore","row","blob","Blob","type","url","URL","createObjectURL","createElement","href","download","toISOString","click","revokeObjectURL"],"sourceRoot":""}