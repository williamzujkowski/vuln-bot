{"version":3,"file":"dashboard.js","mappings":"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","sources":["webpack://vuln-bot/./src/assets/ts/analytics.ts","webpack://vuln-bot/./src/assets/ts/dashboard.ts"],"sourcesContent":["/**\n * Frontend analytics for vulnerability dashboard\n */\n\ninterface AnalyticsEvent {\n  event: string;\n  category: string;\n  action: string;\n  label?: string;\n  value?: number;\n  metadata?: Record<string, any>;\n  timestamp: string;\n}\n\nclass Analytics {\n  private events: AnalyticsEvent[] = [];\n  private sessionId: string;\n  private startTime: number;\n  private isEnabled: boolean = true;\n\n  constructor() {\n    this.sessionId = this.generateSessionId();\n    this.startTime = Date.now();\n\n    // Check if analytics should be disabled (e.g., DNT header)\n    if (navigator.doNotTrack === '1') {\n      this.isEnabled = false;\n    }\n\n    // Set up page unload handler to save metrics\n    window.addEventListener('beforeunload', () => this.flush());\n  }\n\n  private generateSessionId(): string {\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Track a user event\n   */\n  track(\n      event: string,\n      category: string,\n      action: string,\n      label?: string,\n      value?: number,\n      metadata?: Record<string, unknown>,\n  ) {\n    if (!this.isEnabled) return;\n\n    const analyticsEvent: AnalyticsEvent = {\n      event,\n      category,\n      action,\n      timestamp: new Date().toISOString(),\n    };\n\n    if (label !== undefined) analyticsEvent.label = label;\n    if (value !== undefined) analyticsEvent.value = value;\n    if (metadata !== undefined) analyticsEvent.metadata = metadata;\n\n    this.events.push(analyticsEvent);\n\n    // Flush events if buffer is getting large\n    if (this.events.length >= 50) {\n      this.flush();\n    }\n  }\n\n  /**\n   * Track search queries\n   */\n  trackSearch(query: string, resultCount: number) {\n    this.track('search', 'interaction', 'search', query, resultCount, {query, resultCount});\n  }\n\n  /**\n   * Track filter changes\n   */\n  trackFilter(filterType: string, value: any) {\n    this.track('filter_change', 'interaction', 'filter', filterType, undefined, {\n      filterType,\n      value,\n    });\n  }\n\n  /**\n   * Track sort changes\n   */\n  trackSort(field: string, direction: string) {\n    this.track('sort_change', 'interaction', 'sort', `${field}_${direction}`, undefined, {\n      field,\n      direction,\n    });\n  }\n\n  /**\n   * Track page views\n   */\n  trackPageView(page: number, pageSize: number) {\n    this.track('page_view', 'navigation', 'pagination', `page_${page}`, pageSize, {\n      page,\n      pageSize,\n    });\n  }\n\n  /**\n   * Track CSV exports\n   */\n  trackExport(format: string, count: number) {\n    this.track('export', 'interaction', 'export', format, count, {format, count});\n  }\n\n  /**\n   * Track vulnerability clicks\n   */\n  trackVulnerabilityClick(cveId: string, riskScore: number) {\n    this.track('vulnerability_click', 'interaction', 'click', cveId, riskScore, {\n      cveId,\n      riskScore,\n    });\n  }\n\n  /**\n   * Track performance metrics\n   */\n  trackPerformance() {\n    if (!window.performance || !this.isEnabled) return;\n\n    const perfData = window.performance.timing;\n    const pageLoadTime = perfData.loadEventEnd - perfData.navigationStart;\n    const domReadyTime = perfData.domContentLoadedEventEnd - perfData.navigationStart;\n\n    this.track('performance', 'technical', 'page_load', undefined, pageLoadTime, {\n      pageLoadTime,\n      domReadyTime,\n      sessionDuration: Date.now() - this.startTime,\n    });\n  }\n\n  /**\n   * Get session summary\n   */\n  getSessionSummary() {\n    const sessionDuration = (Date.now() - this.startTime) / 1000; // in seconds\n\n    const eventCounts = this.events.reduce(\n        (acc, event) => {\n          acc[event.event] = (acc[event.event] ?? 0) + 1;\n          return acc;\n        },\n      {} as Record<string, number>,\n    );\n\n    return {\n      sessionId: this.sessionId,\n      sessionDuration,\n      eventCount: this.events.length,\n      eventTypes: eventCounts,\n      startTime: new Date(this.startTime).toISOString(),\n      endTime: new Date().toISOString(),\n    };\n  }\n\n  /**\n   * Flush events to storage\n   */\n  private flush() {\n    if (!this.isEnabled || this.events.length === 0) return;\n\n    try {\n      // Store in localStorage for now (could be sent to a server endpoint)\n      const storageKey = `vuln_analytics_${this.sessionId}`;\n      const existingData = localStorage.getItem(storageKey);\n      const existing = existingData ? JSON.parse(existingData) : {events: []};\n\n      existing.events.push(...this.events);\n      existing.summary = this.getSessionSummary();\n\n      localStorage.setItem(storageKey, JSON.stringify(existing));\n\n      // Clear events buffer\n      this.events = [];\n\n      // Clean up old sessions (keep last 10)\n      this.cleanupOldSessions();\n    } catch (error) {\n      console.error('Failed to save analytics:', error);\n    }\n  }\n\n  /**\n   * Clean up old analytics sessions\n   */\n  private cleanupOldSessions() {\n    try {\n      const keys = Object.keys(localStorage).filter((key) => key.startsWith('vuln_analytics_'));\n\n      if (keys.length > 10) {\n        // Sort by timestamp and remove oldest\n        keys\n            .sort()\n            .slice(0, -10)\n            .forEach((key) => {\n              localStorage.removeItem(key);\n            });\n      }\n    } catch (error) {\n      console.error('Failed to cleanup old sessions:', error);\n    }\n  }\n\n  /**\n   * Export analytics data\n   */\n  exportAnalytics(): string {\n    const allSessions = Object.keys(localStorage)\n        .filter((key) => key.startsWith('vuln_analytics_'))\n        .map((key) => {\n          try {\n            return JSON.parse(localStorage.getItem(key) ?? '{}');\n          } catch {\n            return null;\n          }\n        })\n        .filter(Boolean);\n\n    return JSON.stringify(allSessions, null, 2);\n  }\n}\n\n// Export singleton instance\nexport const analytics = new Analytics();\n","/**\n * Alpine.js Vulnerability Dashboard - TypeScript Version\n */\n\nimport type {\n  Vulnerability,\n  VulnerabilityResponse,\n  SeverityLevel,\n  ExploitationStatus,\n} from './types/vulnerability';\nimport './types/alpine';\nimport {analytics} from './analytics';\n\ntype Fuse<T> = import('fuse.js').default<T>;\n\ninterface VulnDashboard {\n  // Data\n  vulnerabilities: Vulnerability[];\n  filteredVulns: Vulnerability[];\n  paginatedVulns: Vulnerability[];\n  searchQuery: string;\n  fuse: Fuse<Vulnerability> | null;\n\n  // Filters\n  filters: {\n    cvssMin: number;\n    cvssMax: number;\n    epssMin: number;\n    epssMax: number;\n    severity: SeverityLevel | '';\n    dateFrom: string;\n    dateTo: string;\n    vendor: string;\n    exploitationStatus: ExploitationStatus | '';\n    tags: string[];\n  };\n\n  // Sort\n  sortField: keyof Vulnerability;\n  sortDirection: 'asc' | 'desc';\n\n  // Pagination\n  currentPage: number;\n  pageSize: number;\n  totalPages: number;\n\n  // State\n  loading: boolean;\n  error: string | null;\n  initialLoad: boolean;\n\n  // Methods\n  init(): Promise<void>;\n  loadVulnerabilities(): Promise<void>;\n  setupSearch(): void;\n  applyFilters(): void;\n  sortResults(results: Vulnerability[]): Vulnerability[];\n  sort(field: keyof Vulnerability): void;\n  updatePagination(): void;\n  previousPage(): void;\n  nextPage(): void;\n  watchFilters(): void;\n  saveStateToHash(): void;\n  loadStateFromHash(): void;\n  getSeverityClass(score: number): string;\n  formatDate(dateStr: string): string;\n  resetFilters(): void;\n  exportResults(): void;\n  trackVulnerabilityClick(cveId: string, riskScore: number): void;\n}\n\ndocument.addEventListener('alpine:init', () => {\n  window.Alpine.data(\n      'vulnDashboard',\n      (): VulnDashboard => ({\n      // Data\n        vulnerabilities: [],\n        filteredVulns: [],\n        paginatedVulns: [],\n        searchQuery: '',\n        fuse: null,\n\n        // Filters\n        filters: {\n          cvssMin: 0,\n          cvssMax: 10,\n          epssMin: 0,\n          epssMax: 100,\n          severity: '',\n          dateFrom: '',\n          dateTo: '',\n          vendor: '',\n          exploitationStatus: '',\n          tags: [],\n        },\n\n        // Sort\n        sortField: 'riskScore',\n        sortDirection: 'desc',\n\n        // Pagination\n        currentPage: 1,\n        pageSize: 20,\n        totalPages: 1,\n\n        // State\n        loading: true,\n        error: null,\n        initialLoad: true,\n\n        async init(): Promise<void> {\n        // Load state from URL hash\n          this.loadStateFromHash();\n\n          // Load vulnerability data\n          await this.loadVulnerabilities();\n\n          // Set up Fuse.js for fuzzy search\n          this.setupSearch();\n\n          // Apply initial filters\n          this.applyFilters();\n\n          // Mark initial load as complete\n          this.initialLoad = false;\n\n          // Watch for changes\n          this.watchFilters();\n\n          // Track performance\n          analytics.trackPerformance();\n        },\n\n        async loadVulnerabilities(): Promise<void> {\n          try {\n            this.loading = true;\n            this.error = null;\n\n            const response = await fetch('/vuln-bot/api/vulns/index.json');\n            if (!response.ok) {\n              throw new Error(`Failed to load vulnerabilities: ${response.status}`);\n            }\n\n            const data: VulnerabilityResponse = await response.json();\n            this.vulnerabilities = data.vulnerabilities || [];\n            this.loading = false;\n          } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n            this.error = errorMessage;\n            this.loading = false;\n            console.error('Failed to load vulnerabilities:', error);\n          }\n        },\n\n        setupSearch(): void {\n          if (this.vulnerabilities.length === 0) return;\n\n          // Configure Fuse.js for fuzzy search\n          const options = {\n            keys: ['cveId', 'title', 'vendors', 'products', 'tags'],\n            threshold: 0.3,\n            includeScore: true,\n          };\n\n          this.fuse = new window.Fuse(this.vulnerabilities, options);\n        },\n\n        applyFilters(): void {\n          let results: Vulnerability[] = [...this.vulnerabilities];\n\n          // Apply search\n          if (this.searchQuery.trim() && this.fuse) {\n            const searchResults = this.fuse.search(this.searchQuery);\n            results = searchResults.map((result: any) => result.item);\n\n            // Track search\n            analytics.trackSearch(this.searchQuery, results.length);\n          }\n\n          // Apply CVSS filter\n          results = results.filter((vuln) => {\n            const score = vuln.cvssScore || 0;\n            return score >= this.filters.cvssMin && score <= this.filters.cvssMax;\n          });\n\n          // Apply EPSS filter\n          results = results.filter((vuln) => {\n            const score = vuln.epssScore || 0;\n            return score >= this.filters.epssMin && score <= this.filters.epssMax;\n          });\n\n          // Apply severity filter\n          if (this.filters.severity) {\n            results = results.filter((vuln) => vuln.severity === this.filters.severity);\n          }\n\n          // Apply date filter\n          if (this.filters.dateFrom) {\n            const fromDate = new Date(this.filters.dateFrom);\n            results = results.filter((vuln) => new Date(vuln.publishedDate) >= fromDate);\n          }\n\n          if (this.filters.dateTo) {\n            const toDate = new Date(this.filters.dateTo);\n            results = results.filter((vuln) => new Date(vuln.publishedDate) <= toDate);\n          }\n\n          // Apply vendor filter\n          if (this.filters.vendor) {\n            const vendorLower = this.filters.vendor.toLowerCase();\n            results = results.filter((vuln) =>\n              vuln.vendors.some((v) => v.toLowerCase().includes(vendorLower)),\n            );\n          }\n\n          // Apply exploitation status filter\n          if (this.filters.exploitationStatus) {\n            results = results.filter(\n                (vuln) => vuln.exploitationStatus === this.filters.exploitationStatus,\n            );\n          }\n\n          // Apply tag filter\n          if (this.filters.tags.length > 0) {\n            results = results.filter((vuln) =>\n              this.filters.tags.every((tag) => vuln.tags.includes(tag)),\n            );\n          }\n\n          // Apply sorting\n          results = this.sortResults(results);\n\n          this.filteredVulns = results;\n          this.updatePagination();\n          this.saveStateToHash();\n        },\n\n        sortResults(results: Vulnerability[]): Vulnerability[] {\n          const field = this.sortField;\n          const direction = this.sortDirection;\n\n          return results.sort((a, b) => {\n            let aVal = a[field] as unknown;\n            let bVal = b[field] as unknown;\n\n            // Handle null/undefined values\n            aVal ??= '';\n            bVal ??= '';\n\n            // Handle dates\n            if (typeof field === 'string' && field.includes('Date')) {\n              aVal = new Date(aVal as string).getTime();\n              bVal = new Date(bVal as string).getTime();\n            }\n\n            // Compare\n            if ((aVal as any) < (bVal as any)) return direction === 'asc' ? -1 : 1;\n            if ((aVal as any) > (bVal as any)) return direction === 'asc' ? 1 : -1;\n            return 0;\n          });\n        },\n\n        sort(field: keyof Vulnerability): void {\n          if (this.sortField === field) {\n          // Toggle direction\n            this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';\n          } else {\n          // New field, default to descending\n            this.sortField = field;\n            this.sortDirection = 'desc';\n          }\n\n          // Track sort change\n          analytics.trackSort(field, this.sortDirection);\n\n          this.applyFilters();\n        },\n\n        updatePagination(): void {\n          this.totalPages = Math.ceil(this.filteredVulns.length / this.pageSize);\n          this.currentPage = Math.min(this.currentPage, Math.max(1, this.totalPages));\n\n          const start = (this.currentPage - 1) * this.pageSize;\n          const end = start + this.pageSize;\n          this.paginatedVulns = this.filteredVulns.slice(start, end);\n        },\n\n        previousPage(): void {\n          if (this.currentPage > 1) {\n            this.currentPage--;\n            this.updatePagination();\n          }\n        },\n\n        nextPage(): void {\n          if (this.currentPage < this.totalPages) {\n            this.currentPage++;\n            this.updatePagination();\n          }\n        },\n\n        watchFilters(): void {\n        // Watch for filter changes\n          (this as any).$watch('searchQuery', () => this.applyFilters());\n          (this as any).$watch('filters', () => this.applyFilters(), {deep: true});\n          (this as any).$watch('pageSize', () => {\n            this.currentPage = 1;\n            this.updatePagination();\n          });\n        },\n\n        saveStateToHash(): void {\n        // Don't save state during initial load\n          if (this.loading || this.vulnerabilities.length === 0 || this.initialLoad) {\n            return;\n          }\n\n          const state: Record<string, string | number> = {\n            q: this.searchQuery,\n            cvssMin: this.filters.cvssMin,\n            cvssMax: this.filters.cvssMax,\n            epssMin: this.filters.epssMin,\n            epssMax: this.filters.epssMax,\n            severity: this.filters.severity,\n            dateFrom: this.filters.dateFrom,\n            dateTo: this.filters.dateTo,\n            vendor: this.filters.vendor,\n            exploitation: this.filters.exploitationStatus,\n            tags: this.filters.tags.join(','),\n            sort: this.sortField,\n            dir: this.sortDirection,\n            page: this.currentPage,\n            size: this.pageSize,\n          };\n\n          // Remove empty values and defaults\n          Object.keys(state).forEach((key) => {\n            const value = state[key];\n            if (\n              !value ||\n            value === '' ||\n            (key === 'cvssMin' && value === 0) ||\n            (key === 'cvssMax' && value === 10) ||\n            (key === 'epssMin' && value === 0) ||\n            (key === 'epssMax' && value === 100) ||\n            (key === 'page' && value === 1) ||\n            (key === 'size' && value === 20) ||\n            (key === 'sort' && value === 'riskScore') ||\n            (key === 'dir' && value === 'desc')\n            ) {\n              delete state[key];\n            }\n          });\n\n          const hash = new URLSearchParams(\n              Object.fromEntries(Object.entries(state).map(([k, v]) => [k, String(v)])),\n          ).toString();\n          window.location.hash = hash;\n        },\n\n        loadStateFromHash(): void {\n          const hash = window.location.hash.slice(1);\n          if (!hash) return;\n\n          const params = new URLSearchParams(hash);\n\n          // Load search query\n          this.searchQuery = params.get('q') ?? '';\n\n          // Load filters\n          this.filters.cvssMin = parseFloat(params.get('cvssMin') ?? '0');\n          this.filters.cvssMax = parseFloat(params.get('cvssMax') ?? '10');\n          this.filters.epssMin = parseInt(params.get('epssMin') ?? '0');\n          this.filters.epssMax = parseInt(params.get('epssMax') ?? '100');\n          this.filters.severity = (params.get('severity') ?? '') as SeverityLevel | '';\n          this.filters.dateFrom = params.get('dateFrom') ?? '';\n          this.filters.dateTo = params.get('dateTo') ?? '';\n          this.filters.vendor = params.get('vendor') ?? '';\n          this.filters.exploitationStatus = (params.get('exploitation') ?? '') as\n          | ExploitationStatus\n          | '';\n\n          const tags = params.get('tags');\n          this.filters.tags = tags ? tags.split(',').filter((t) => t) : [];\n\n          // Load sorting\n          this.sortField = (params.get('sort') ?? 'riskScore') as keyof Vulnerability;\n          this.sortDirection = (params.get('dir') ?? 'desc') as 'asc' | 'desc';\n\n          // Load pagination\n          this.currentPage = parseInt(params.get('page') ?? '1');\n          this.pageSize = parseInt(params.get('size') ?? '20');\n        },\n\n        getSeverityClass(score: number): string {\n          if (score >= 9) return 'severity-critical';\n          if (score >= 7) return 'severity-high';\n          if (score >= 4) return 'severity-medium';\n          if (score > 0) return 'severity-low';\n          return 'severity-none';\n        },\n\n        formatDate(dateStr: string): string {\n          const date = new Date(dateStr);\n          return date.toLocaleDateString('en-US', {\n            year: 'numeric',\n            month: 'short',\n            day: 'numeric',\n          });\n        },\n\n        resetFilters(): void {\n          this.searchQuery = '';\n          this.filters = {\n            cvssMin: 0,\n            cvssMax: 10,\n            epssMin: 0,\n            epssMax: 100,\n            severity: '',\n            dateFrom: '',\n            dateTo: '',\n            vendor: '',\n            exploitationStatus: '',\n            tags: [],\n          };\n          this.currentPage = 1;\n          this.applyFilters();\n        },\n\n        exportResults(): void {\n        // Track export\n          analytics.trackExport('csv', this.filteredVulns.length);\n\n          // Create CSV content\n          const headers = [\n            'CVE ID',\n            'Title',\n            'Risk Score',\n            'Severity',\n            'CVSS Score',\n            'EPSS %',\n            'Published Date',\n          ];\n          const rows = this.filteredVulns.map((vuln) => [\n            vuln.cveId,\n            `\"${vuln.title.replace(/\"/g, '\"\"')}\"`,\n            vuln.riskScore.toString(),\n            vuln.severity,\n            vuln.cvssScore?.toString() || '',\n            vuln.epssScore?.toString() || '',\n            vuln.publishedDate,\n          ]);\n\n          const csv = [headers, ...rows].map((row) => row.join(',')).join('\\n');\n\n          // Download CSV\n          const blob = new Blob([csv], {type: 'text/csv'});\n          const url = URL.createObjectURL(blob);\n          const a = document.createElement('a');\n          a.href = url;\n          a.download = `vulnerabilities-${new Date().toISOString().slice(0, 10)}.csv`;\n          a.click();\n          URL.revokeObjectURL(url);\n        },\n\n        trackVulnerabilityClick(cveId: string, riskScore: number): void {\n          analytics.trackVulnerabilityClick(cveId, riskScore);\n        },\n      }),\n  );\n});\n"],"names":["analytics","constructor","events","isEnabled","this","sessionId","generateSessionId","startTime","Date","now","navigator","doNotTrack","window","addEventListener","flush","Math","random","toString","substr","track","event","category","action","label","value","metadata","analyticsEvent","timestamp","toISOString","undefined","push","length","trackSearch","query","resultCount","trackFilter","filterType","trackSort","field","direction","trackPageView","page","pageSize","trackExport","format","count","trackVulnerabilityClick","cveId","riskScore","trackPerformance","performance","perfData","timing","pageLoadTime","loadEventEnd","navigationStart","domReadyTime","domContentLoadedEventEnd","sessionDuration","getSessionSummary","eventCounts","reduce","acc","eventCount","eventTypes","endTime","storageKey","existingData","localStorage","getItem","existing","JSON","parse","summary","setItem","stringify","cleanupOldSessions","error","console","keys","Object","filter","key","startsWith","sort","slice","forEach","removeItem","exportAnalytics","allSessions","map","Boolean","document","Alpine","data","vulnerabilities","filteredVulns","paginatedVulns","searchQuery","fuse","filters","cvssMin","cvssMax","epssMin","epssMax","severity","dateFrom","dateTo","vendor","exploitationStatus","tags","sortField","sortDirection","currentPage","totalPages","loading","initialLoad","init","loadStateFromHash","loadVulnerabilities","setupSearch","applyFilters","watchFilters","response","fetch","ok","Error","status","json","errorMessage","message","Fuse","threshold","includeScore","results","trim","search","result","item","vuln","score","cvssScore","epssScore","fromDate","publishedDate","toDate","vendorLower","toLowerCase","vendors","some","v","includes","every","tag","sortResults","updatePagination","saveStateToHash","a","b","aVal","bVal","getTime","ceil","min","max","start","end","previousPage","nextPage","$watch","deep","state","q","exploitation","join","dir","size","hash","URLSearchParams","fromEntries","entries","k","String","location","params","get","parseFloat","parseInt","split","t","getSeverityClass","formatDate","dateStr","toLocaleDateString","year","month","day","resetFilters","exportResults","csv","title","replace","row","blob","Blob","type","url","URL","createObjectURL","createElement","href","download","click","revokeObjectURL"],"sourceRoot":""}