name: Vulnerability Harvest (Every 4 Hours)

on:
  schedule:
    # Run every 4 hours starting at midnight UTC
    # 0:00, 4:00, 8:00, 12:00, 16:00, 20:00 UTC
    - cron: "0 */4 * * *"
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Run in dry-run mode (no commits)"
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pages: write
  id-token: write

env:
  PYTHON_VERSION: "3.x"
  NODE_VERSION: "lts/*"

jobs:
  harvest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-uv-
      
      - name: Cache API responses
        uses: actions/cache@v4
        with:
          path: actions-cache/
          key: api-cache-${{ hashFiles('scripts/harvest/**/*.py') }}
          restore-keys: |
            api-cache-
      
      - name: Install dependencies
        run: |
          uv pip install --system -r requirements.txt
          npm ci
      
      - name: Run vulnerability harvest
        id: harvest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          EPSS_API_KEY: ${{ secrets.EPSS_API_KEY }}
        run: |
          echo "Starting vulnerability harvest..."
          python -m scripts.main harvest \
            --cache-dir actions-cache/ \
            --years 2024 \
            --years 2025 \
            --min-severity MEDIUM \
            --min-epss 0.7 2>&1 | tee harvest.log
          
          # Extract metrics from log
          VULNS_FOUND=$(grep -o "Harvested [0-9]\+ vulnerabilities" harvest.log | grep -o "[0-9]\+" || echo "0")
          echo "vulnerabilities_found=$VULNS_FOUND" >> $GITHUB_OUTPUT
          echo "Found $VULNS_FOUND vulnerabilities in harvest"
          
          # Check for errors
          if grep -q "Failed to fetch" harvest.log; then
            echo "::warning::Some API fetch failures detected"
          fi
          
          if [ "$VULNS_FOUND" = "0" ]; then
            echo "::warning::No vulnerabilities found - this may indicate an issue"
          fi
      
      - name: Generate vulnerability briefing
        run: |
          python -m scripts.main generate-briefing \
            --cache-dir actions-cache/ \
            --output-dir . \
            --days 1
      
      - name: Generate metrics visualization
        if: always()
        run: |
          echo "## 📊 Harvest Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          python -m scripts.visualize_metrics \
            --db-path actions-cache/metrics.db \
            --format github >> $GITHUB_STEP_SUMMARY || echo "Metrics not available" >> $GITHUB_STEP_SUMMARY
      
      - name: Build static site
        run: |
          npm run build
      
      - name: Update coverage badge
        if: github.event_name != 'workflow_dispatch' || !github.event.inputs.dry_run
        run: |
          python -m scripts.main update-badge
      
      - name: Commit changes
        if: github.event_name != 'workflow_dispatch' || !github.event.inputs.dry_run
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add -A
          git diff --cached --quiet || git commit -m "chore: update vulnerability briefing $(date +%Y-%m-%d)"
          git push
      
      - name: Upload Pages artifact
        if: github.event_name != 'workflow_dispatch' || !github.event.inputs.dry_run
        uses: actions/upload-pages-artifact@v3
        with:
          path: public/
      
      - name: Deploy to GitHub Pages
        if: github.event_name != 'workflow_dispatch' || !github.event.inputs.dry_run
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload harvest logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: harvest-logs-${{ github.run_number }}
          path: |
            harvest.log
            actions-cache/metrics.db
            actions-cache/api_cache/
          retention-days: 30
      
      - name: Export metrics data
        if: always()
        run: |
          python -m scripts.visualize_metrics \
            --db-path actions-cache/metrics.db \
            --format json \
            --export actions-cache/metrics-export.json || true
      
      - name: Create harvest summary
        if: always()
        run: |
          echo "# Vulnerability Harvest Summary 📊" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Vulnerabilities Found:** ${{ steps.harvest.outputs.vulnerabilities_found || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f harvest.log ]; then
            echo "## Harvest Log Summary" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            tail -20 harvest.log >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ steps.harvest.outputs.vulnerabilities_found }}" != "0" ]; then
            echo "🌐 **Updated Site:** https://williamzujkowski.github.io/vuln-bot/" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Send alerts
        if: env.SEND_ALERTS == 'true' && (github.event_name != 'workflow_dispatch' || !github.event.inputs.dry_run)
        run: |
          python -m scripts.main send-alerts
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          TEAMS_WEBHOOK: ${{ secrets.TEAMS_WEBHOOK }}
          SEND_ALERTS: ${{ vars.SEND_ALERTS }}